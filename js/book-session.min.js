document.addEventListener('DOMContentLoaded', function () {
    const steps = Array.from(document.querySelectorAll('.booking-step'));
    const progressBar = document.getElementById('progress-bar');
    const progressSteps = [
        document.getElementById('progress-step-1'),
        document.getElementById('progress-step-2'),
        document.getElementById('progress-step-3'),
        document.getElementById('progress-step-4')
    ];

    const serviceCards = document.querySelectorAll('.service-card');
    const nextButtonStep1 = document.getElementById('next-step-1');

    const consultantSelect = document.getElementById('consultant');
    const dateInput = document.getElementById('session-date');
    const availableTimesContainer = document.getElementById('available-times');
    const nextButtonStep2 = document.getElementById('next-step-2');
    const prevButtonStep2 = document.getElementById('prev-step-2');

    const studentForm = document.getElementById('student-info-form');
    const studentNameInput = document.getElementById('student-name');
    const studentEmailInput = document.getElementById('student-email');
    const studentPhoneInput = document.getElementById('student-phone');
    const nextButtonStep3 = document.getElementById('next-step-3');
    const prevButtonStep3 = document.getElementById('prev-step-3');

    const confirmServiceEl = document.getElementById('confirm-service');
    const confirmConsultantEl = document.getElementById('confirm-consultant');
    const confirmDateTimeEl = document.getElementById('confirm-datetime');
    const confirmNameEl = document.getElementById('confirm-name');
    const confirmEmailEl = document.getElementById('confirm-email');
    const confirmPhoneEl = document.getElementById('confirm-phone');
    const confirmPriceEl = document.getElementById('confirm-price');
    const prevButtonStep4 = document.getElementById('prev-step-4');
    const confirmBookingButton = document.getElementById('confirm-booking-button');
    
    const bookingSuccessMessage = document.getElementById('booking-success');
    const bookingStepsContainer = document.getElementById('booking-steps-container');


    let currentStep = 0;
    let selectedService = null;
    let selectedTimeSlot = null;
    let selectedConsultant = null;
    let selectedDate = null;

    const mockAvailableTimes = {
        "any": ["09:00 AM", "11:00 AM", "02:00 PM", "04:00 PM"],
        "ahmed": ["10:00 AM", "03:00 PM"],
        "sara": ["09:30 AM", "01:30 PM", "05:00 PM"],
        "mohamed": ["11:30 AM", "02:30 PM"]
    };

    function updateProgressBar() {
        const progressPercentage = ((currentStep + 1) / steps.length) * 100;
        progressBar.style.width = `${progressPercentage}%`;
        progressSteps.forEach((stepEl, index) => {
            if (index === currentStep) {
                stepEl.classList.add('text-primary', 'font-semibold');
                stepEl.classList.remove('text-gray-600');
            } else if (index < currentStep) {
                stepEl.classList.add('text-green-500', 'font-semibold');
                stepEl.classList.remove('text-gray-600', 'text-primary');
            } else {
                stepEl.classList.remove('text-primary', 'text-green-500', 'font-semibold');
                stepEl.classList.add('text-gray-600');
            }
        });
    }

    function showStep(stepIndex) {
        steps.forEach((step, index) => {
            step.classList.toggle('hidden', index !== stepIndex);
        });
        currentStep = stepIndex;
        updateProgressBar();
        window.scrollTo({ top: document.getElementById('progress-bar-container').offsetTop - 80, behavior: 'smooth' });
    }

    // Step 1: Service Selection
    serviceCards.forEach(card => {
        card.addEventListener('click', () => {
            serviceCards.forEach(c => {
                c.classList.remove('selected-service');
                c.querySelector('.service-checkmark').classList.add('hidden');
                c.querySelector('.service-selected-text').classList.add('hidden');
            });
            card.classList.add('selected-service');
            card.querySelector('.service-checkmark').classList.remove('hidden');
            card.querySelector('.service-selected-text').classList.remove('hidden');
            
            selectedService = {
                id: card.dataset.serviceId,
                name: card.dataset.serviceName,
                price: card.dataset.servicePrice
            };
            nextButtonStep1.disabled = false;
        });
    });

    if (nextButtonStep1) {
        nextButtonStep1.addEventListener('click', () => {
            if (selectedService) {
                showStep(1);
            }
        });
    }

    // Pre-fill service from URL parameter
    const urlParams = new URLSearchParams(window.location.search);
    const serviceIdFromUrl = urlParams.get('service');
    if (serviceIdFromUrl) {
        const cardToSelect = document.querySelector(`.service-card[data-service-id="${serviceIdFromUrl}"]`);
        if (cardToSelect) {
            cardToSelect.click();
        }
    }
    
    // Step 2: Time and Consultant
    function populateTimeSlots() {
        availableTimesContainer.innerHTML = ''; // Clear previous slots
        const consultant = consultantSelect.value;
        const date = dateInput.value;

        if (!consultant || !date) {
            availableTimesContainer.innerHTML = '<p class="text-gray-500 col-span-full">الرجاء اختيار مستشار وتاريخ لعرض الأوقات.</p>';
            nextButtonStep2.disabled = true;
            return;
        }

        const times = mockAvailableTimes[consultant] || mockAvailableTimes["any"]; // Fallback to 'any' if specific consultant has no listed times
        if (times.length === 0) {
            availableTimesContainer.innerHTML = '<p class="text-gray-500 col-span-full">لا توجد أوقات متاحة لهذا الاختيار.</p>';
            nextButtonStep2.disabled = true;
            return;
        }

        times.forEach(time => {
            const timeButton = document.createElement('button');
            timeButton.type = 'button';
            timeButton.textContent = time;
            timeButton.classList.add('time-slot-button', 'p-2', 'border', 'rounded-md', 'hover:bg-secondary', 'hover:text-white', 'transition-colors', 'focus:outline-none', 'focus:ring-2', 'focus:ring-primary');
            timeButton.addEventListener('click', () => {
                document.querySelectorAll('.time-slot-button').forEach(btn => btn.classList.remove('selected-time'));
                timeButton.classList.add('selected-time');
                selectedTimeSlot = time;
                selectedConsultant = consultantSelect.options[consultantSelect.selectedIndex].text;
                selectedDate = dateInput.value;
                nextButtonStep2.disabled = false;
            });
            availableTimesContainer.appendChild(timeButton);
        });
    }

    if(consultantSelect) consultantSelect.addEventListener('change', populateTimeSlots);
    if(dateInput) {
        dateInput.min = new Date().toISOString().split("T")[0]; // Set min date to today
        dateInput.addEventListener('change', populateTimeSlots);
    }


    if (nextButtonStep2) {
        nextButtonStep2.addEventListener('click', () => {
            if (selectedTimeSlot && selectedConsultant && selectedDate) {
                showStep(2);
            }
        });
    }
    if (prevButtonStep2) prevButtonStep2.addEventListener('click', () => showStep(0));

    // Step 3: Student Information
    if (nextButtonStep3) {
        nextButtonStep3.addEventListener('click', () => {
            if (studentForm.checkValidity()) {
                // Populate confirmation details
                confirmServiceEl.textContent = selectedService.name;
                confirmConsultantEl.textContent = selectedConsultant;
                confirmDateTimeEl.textContent = `${new Date(selectedDate).toLocaleDateString('ar-EG')} - ${selectedTimeSlot}`;
                confirmNameEl.textContent = studentNameInput.value;
                confirmEmailEl.textContent = studentEmailInput.value;
                confirmPhoneEl.textContent = studentPhoneInput.value;
                confirmPriceEl.textContent = selectedService.price;
                showStep(3);
            } else {
                studentForm.reportValidity(); // Show validation messages
            }
        });
    }
    if (prevButtonStep3) prevButtonStep3.addEventListener('click', () => showStep(1));

    // Step 4: Confirmation
    if (confirmBookingButton) {
        confirmBookingButton.addEventListener('click', () => {
            // Here you would typically integrate with a payment gateway and backend
            console.log('Booking confirmed (simulated):', {
                service: selectedService,
                consultant: selectedConsultant,
                dateTime: `${selectedDate} ${selectedTimeSlot}`,
                studentName: studentNameInput.value,
                studentEmail: studentEmailInput.value,
                studentPhone: studentPhoneInput.value,
                notes: document.getElementById('student-notes').value,
                price: selectedService.price
            });
            bookingStepsContainer.classList.add('hidden');
            document.getElementById('progress-bar-container').classList.add('hidden');
            bookingSuccessMessage.classList.remove('hidden');
            window.scrollTo({ top: 0, behavior: 'smooth' });
        });
    }
    if (prevButtonStep4) prevButtonStep4.addEventListener('click', () => showStep(2));
    
    // Initialize
    if (steps.length > 0) { // Check if on booking page
        showStep(0); 
    }
});
