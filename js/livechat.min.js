/**
 * Live Chat JavaScript for Advisor website
 * Handles live chat widget toggle and basic interaction.
 */

document.addEventListener('DOMContentLoaded', function () {
    const liveChatButton = document.getElementById('live-chat-button');
    const liveChatWindow = document.getElementById('live-chat-window');
    const closeChatButton = document.getElementById('close-chat-button');
    const chatInput = document.getElementById('chat-input');
    const chatSendButton = document.getElementById('chat-send-button');
    const chatMessagesContainer = document.getElementById('chat-messages');

    let chatOpened = false;

    if (liveChatButton && liveChatWindow && closeChatButton) {
        liveChatButton.addEventListener('click', toggleChatWindow);
        closeChatButton.addEventListener('click', toggleChatWindow);

        // Optional: Close chat if Esc key is pressed
        document.addEventListener('keydown', function (event) {
            if (event.key === "Escape" && chatOpened) {
                toggleChatWindow();
            }
        });
    } else {
        console.warn("Live chat elements not found. Chat functionality may be affected.");
        return; // Exit if core elements are missing
    }

    function toggleChatWindow() {
        if (liveChatWindow.classList.contains('hidden')) {
            liveChatWindow.classList.remove('hidden', 'translate-y-10', 'opacity-0');
            liveChatWindow.classList.add('translate-y-0', 'opacity-100');
            chatOpened = true;
            // Focus on input when chat opens (optional, consider accessibility)
            // chatInput.focus(); 
        } else {
            liveChatWindow.classList.add('translate-y-10', 'opacity-0');
            // Allow animation to complete before hiding
            setTimeout(() => {
                liveChatWindow.classList.add('hidden');
            }, 300); // Corresponds to transition duration
            chatOpened = false;
        }
    }

    if (chatSendButton && chatInput && chatMessagesContainer) {
        chatSendButton.closest('form').addEventListener('submit', function(event) {
            event.preventDefault();
            const messageText = chatInput.value.trim();
            if (messageText) {
                appendMessage(messageText, 'user');
                chatInput.value = '';
                // Simulate bot reply (replace with actual bot/agent logic)
                setTimeout(() => {
                    simulateBotReply(messageText);
                }, 1000);
            }
        });
    }

    function appendMessage(text, sender) {
        const messageDiv = document.createElement('div');
        messageDiv.classList.add('flex', 'items-start', 'gap-2.5');

        if (sender === 'user') {
            messageDiv.classList.add('justify-end');
            messageDiv.innerHTML = `
                <div class="flex flex-col gap-1 w-full max-w-[calc(100%-3.5rem)] items-end">
                    <div class="leading-tight p-2.5 rounded-lg rounded-ee-none bg-primary text-white shadow-sm">
                        <p class="text-sm">${text}</p>
                    </div>
                </div>
                <div class="flex-shrink-0 w-8 h-8 rounded-full bg-gray-300 flex items-center justify-center text-gray-600 font-semibold text-sm shadow">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor"><path fill-rule="evenodd" d="M10 9a3 3 0 100-6 3 3 0 000 6zm-7 9a7 7 0 1114 0H3z" clip-rule="evenodd" /></svg>
                </div>
            `;
        } else { // Bot message
            messageDiv.innerHTML = `
                <div class="flex-shrink-0 w-8 h-8 rounded-full bg-gradient-to-br from-secondary to-primary flex items-center justify-center text-white font-semibold text-sm shadow">
                    <img src="https://r2.flowith.net/files/5f6b3b59-44f5-4972-93ff-8873ea07dadb/1747954604288-2@1500x1500.png" alt="Bot" class="h-5 w-5 object-contain filter brightness-0 invert-[1]">
                </div>
                <div class="flex flex-col gap-1 w-full max-w-[calc(100%-3.5rem)]">
                    <div class="flex items-center space-x-2 rtl:space-x-reverse">
                        <span class="text-xs font-semibold text-gray-700">بوت Advisor</span>
                    </div>
                    <div class="leading-tight p-2.5 rounded-lg rounded-es-none bg-white shadow-sm border border-gray-200 text-gray-800">
                        <p class="text-sm">${text}</p>
                    </div>
                </div>
            `;
        }
        chatMessagesContainer.appendChild(messageDiv);
        chatMessagesContainer.scrollTop = chatMessagesContainer.scrollHeight; // Auto-scroll to new message
    }

    function simulateBotReply(userMessage) {
        let botResponse = "شكراً لرسالتك! كيف يمكنني مساعدتك اليوم؟"; // Default reply

        if (userMessage.toLowerCase().includes("سعر") || userMessage.toLowerCase().includes("تكلفة")) {
            botResponse = "لمعرفة أسعار خدماتنا، يرجى زيارة صفحة <a href='services.html' class='text-primary underline'>الخدمات</a> أو <a href='book-session.html' class='text-primary underline'>حجز جلسة</a> لاختيار الباقة.";
        } else if (userMessage.toLowerCase().includes("تخصص") || userMessage.toLowerCase().includes("جامعة")) {
            botResponse = "يمكننا مساعدتك في اختيار التخصص أو الجامعة المناسبة. هل ترغب في <a href='book-session.html' class='text-primary underline'>حجز جلسة استشارية</a>؟";
        } else if (userMessage.toLowerCase().includes("شكرا")) {
            botResponse = "على الرحب والسعة! هل هناك أي شيء آخر يمكنني مساعدتك به؟";
        } else if (userMessage.toLowerCase().includes("مرحبا") || userMessage.toLowerCase().includes("السلام عليكم")) {
             botResponse = "وعليكم السلام! أهلاً بك. كيف يمكنني خدمتك؟";
        }
        appendMessage(botResponse, 'bot');
    }

});
// For minification demonstration, this file's content is duplicated from livechat.js but named .min.js
// In a real scenario, this would be the minified output of livechat.js

